    
from pathlib import Path
import random
from polytop.junction import Junction
from polytop.monomer import Monomer
from polytop.polymer import Polymer
from polytop.topology import Topology


def test_polymer(data_dir: Path, output_dir: Path):    
    arg = Topology.from_ITP(data_dir/"arginine.itp")
    arg_a1 = Junction("N1", arg.get_bond('N3','H20'))
    arg_a2 = Junction("N2", arg.get_bond('N6','H23'))
    arg_c = Junction("C", arg.get_bond('C11','O1'))
    
    glu = Topology.from_ITP(data_dir/"glutamine.itp")
    glu_a = Junction("N1", glu.get_bond('N1','H6'))
    glu_c = Junction("C", glu.get_bond('C4','O1'))
    
    arg_monomer = Monomer(arg, [arg_a1, arg_a2, arg_c])
    glu_monomer = Monomer(glu, [glu_a, glu_c])
    
    # set random seed for reproducibility
    random.seed(42)
    
    # start with a randomly selected monomer, 20:80::GLU:ARG
    if random.random() < 0.2:
        polymer = Polymer(glu_monomer)
        last_monomer = "glutamine"
    else:
        polymer = Polymer(arg_monomer)
        last_monomer = "arginine"
        
    # add 12 monomers to the polymer backbone alternating         
    for i in range(12):
        if last_monomer == "arginine":
            polymer.extend(glu_monomer, from_junction_name= 'N1', to_junction_name= 'C')
            last_monomer = "glutamine"
        else:
            polymer.extend(arg_monomer, from_junction_name= 'N1', to_junction_name= 'C')
            last_monomer = "arginine"
    
    # extend the backbone in both directions with 8 more arginines
    for i in range(8):
        polymer.extend(arg_monomer, from_junction_name= 'N1', to_junction_name= 'C')
        polymer.extend(arg_monomer, from_junction_name= 'C', to_junction_name= 'N1')
                
    # add another monomer (80:20::GLU:ARG) to the branches of any remaining junction points 20 times
    countdown = 20
    while polymer.has_junction("N2") and countdown > 0:
        if random.random() < 0.2:
            polymer.extend(arg_monomer, from_junction_name= 'N2', to_junction_name= 'C')
        else:
            polymer.extend(glu_monomer, from_junction_name= 'N2', to_junction_name= 'C')            
        countdown -= 1
    polymer.topology.preamble = ["Generated by PolyTop","Author: Richard A. Morris","pytest: tests/test_polymer.py"]

    polymer.save_to_file(output_dir/'polymer.json')
    polymer_topology = polymer.topology
    polymer_topology.to_ITP(output_dir/'polymer.itp')

    
    