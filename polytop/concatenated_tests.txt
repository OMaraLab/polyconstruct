..\tests\test_atoms.py
-----------------------------
import json
from polytop.atoms import Atom
from polytop.topology import Topology


def test_atom_creation()->None:
    atom = Atom(
        atom_id=26,
        atom_type="N3",
        residue_id=1,
        residue_name="ARG",
        atom_name="NH2",
        charge_group_num=26,
        partial_charge=-0.940000,
        mass=14.0067,
    )
    assert atom.atom_id == 26
    assert atom.atom_type == "N3"
    assert atom.residue_id == 1
    assert atom.residue_name == "ARG"
    assert atom.atom_name == "NH2"
    assert atom.charge_group_num == 26
    assert atom.partial_charge == -0.940000
    assert atom.mass == 14.0067

def test_repr():
    arg=Topology.from_ITP("tests/samples/arginine.itp")
    assert arg.atoms[0].__repr__()=='Atom(1H)->[2]'
    
def test_pseudoatoms():
    atom = Atom(
        atom_id=1,
        atom_type="X",
        residue_id=1,
        residue_name="ARG",
        atom_name="X1",
        charge_group_num=26,
        partial_charge=-0.940000,
        mass=14.0067,
    )
    assert atom.is_virtual
    
def test_atom_creation_from_line():
    atom = Atom.from_line("    1  HS14    1    AE97    H26    1    0.412   1.0080")
    assert atom.atom_id == 1
    assert atom.atom_type == "HS14"
    assert atom.residue_id == 1
    assert atom.residue_name == "AE97"
    assert atom.atom_name == "H26"
    assert atom.charge_group_num == 1
    assert atom.partial_charge == 0.412
    assert atom.mass == 1.0080
    
def test_atom_serialization():
    atom = Atom(
        atom_id=26,
        atom_type="N3",
        residue_id=1,
        residue_name="ARG",
        atom_name="NH2",
        charge_group_num=26,
        partial_charge=-0.940000,
        mass=14.0067,
    )
    atom_dict = atom.to_dict()
    with open("tests/samples/atom.json", "w") as f:
        json.dump(atom_dict, f)
    with open("tests/samples/atom.json", "r") as f:
        new_atom = Atom.from_dict(json.load(f))
    assert atom.atom_id == new_atom.atom_id
    assert atom.atom_type == new_atom.atom_type
    assert atom.residue_id == new_atom.residue_id
    assert atom.residue_name == new_atom.residue_name
    assert atom.atom_name == new_atom.atom_name
    assert atom.charge_group_num == new_atom.charge_group_num
    assert atom.partial_charge == new_atom.partial_charge
    assert atom.mass == new_atom.mass
    -----------------------------
..\tests\test_bonds.py
-----------------------------
import json
from polytop.atoms import Atom
from polytop.bonds import Bond
from polytop.topology import Topology


def test_bond_creation()->None:
    atom_a = Atom(
        atom_id=20,
        atom_type="C",
        residue_id=1,
        residue_name="ARG",
        atom_name="C20",
        charge_group_num=20,
        partial_charge=0.5,
        mass=12.011,
    )
    atom_b = Atom(
        atom_id=22,
        atom_type="C",
        residue_id=1,
        residue_name="ARG",
        atom_name="C22",
        charge_group_num=22,
        partial_charge=0.5,
        mass=12.011,
    )
    bond = Bond(
        atom_a, atom_b, bond_type="1", bond_length=0.147, force_constant=265265.0
    )
    assert bond.atom_a.atom_id == 20
    assert bond.atom_b.atom_id == 22
    assert bond.bond_type == "1"
    assert bond.bond_length == 0.147
    assert bond.force_constant == 265265.0

def test_bond_traversal():
    arg = Topology.from_ITP("tests/samples/arginine.itp")
    bond = arg.get_bond(12, 15)
    assert bond.atom_a.atom_id == 12
    assert bond.atom_b.atom_id == 15
    LHS = bond.LHS()
    RHS = bond.RHS()
    assert len(LHS) == 14
    assert len(RHS) == 12
    allatoms = set(arg.atoms)
    assert allatoms == LHS | RHS
    assert LHS & RHS == set()

def test_bond_serialization():
    atomlist = [
        Atom(
            atom_id=1,
            atom_type="N3",
            residue_id=1,
            residue_name="test",
            atom_name="NH2",
            charge_group_num=26,
            partial_charge=-0.940000,
            mass=14.0067,
        ),
        Atom(
            atom_id=2,
            atom_type="H1",
            residue_id=1,
            residue_name="test",
            atom_name="NH2",
            charge_group_num=26,
            partial_charge=-0.940000,
            mass=14.0067,
        )
    ]
    bond = Bond(atomlist[0], atomlist[1], bond_type="1", bond_length=0.147, force_constant=265265.0)
    bond_dict = bond.to_dict()
    with open("tests/samples/bonds.json", "w") as f:
        json.dump(bond_dict, f)
    with open("tests/samples/bonds.json", "r") as f:
        new_bond = Bond.from_dict(json.load(f),atoms=atomlist)
    assert new_bond.atom_a.atom_id == bond.atom_a.atom_id
    assert new_bond.atom_b.atom_id == bond.atom_b.atom_id
    assert new_bond.bond_type == bond.bond_type
    assert new_bond.bond_length == bond.bond_length
    assert new_bond.force_constant == bond.force_constant

def test_arg_double_bonds():
    arg = Topology.from_ITP("tests/samples/arginine.itp")
    double_bond_1 = arg.get_bond('C11','O2')
    assert double_bond_1.order == 1
    assert double_bond_1
    double_bond_1.order = 2 # ITP files do not include bond orders
    assert double_bond_1.order == 2

    double_bond_2 = arg.get_bond('C12','N4')
    assert double_bond_2.order == 1
    assert double_bond_2
    double_bond_2.order = 2 # ITP files do not include bond orders
    assert double_bond_2.order == 2
-----------------------------
..\tests\test_angles.py
-----------------------------
import json
from polytop.angles import Angle
from polytop.atoms import Atom
from polytop.bonds import Bond


def test_angle_creation()->None:
    atom_a = Atom(
        atom_id=9,
        atom_type="C",
        residue_id=1,
        residue_name="ARG",
        atom_name="C9",
        charge_group_num=9,
        partial_charge=0.5,
        mass=12.011,
    )
    atom_b = Atom(
        atom_id=12,
        atom_type="C",
        residue_id=1,
        residue_name="ARG",
        atom_name="C12",
        charge_group_num=12,
        partial_charge=0.5,
        mass=12.011,
    )
    atom_c = Atom(
        atom_id=15,
        atom_type="C",
        residue_id=1,
        residue_name="ARG",
        atom_name="C15",
        charge_group_num=15,
        partial_charge=0.5,
        mass=12.011,
    )
    bond_ab = Bond(atom_a, atom_b, bond_type="1", bond_length=1.5, force_constant=1000)
    bond_bc = Bond(atom_b, atom_c, bond_type="1", bond_length=1.5, force_constant=1000)
    
    angle = Angle(
        atom_a,
        atom_b,
        atom_c,
        angle_type="1",
        angle_value=109.5,
        force_constant=29288.0,
    )
    assert angle.atom_a.atom_id == 9
    assert angle.atom_b.atom_id == 12
    assert angle.atom_c.atom_id == 15
    assert angle.angle_type == "1"
    assert angle.angle_value == 109.5
    assert angle.force_constant == 29288.0

def test_angle_serialization():
    atomlist = [
        Atom(
            atom_id=1,
            atom_type="C",
            residue_id=1,
            residue_name="ARG",
            atom_name="C9",
            charge_group_num=9,
            partial_charge=0.5,
            mass=12.011,
        ),
        Atom(
            atom_id=4,
            atom_type="C",
            residue_id=1,
            residue_name="ARG",
            atom_name="C12",
            charge_group_num=12,
            partial_charge=0.5,
            mass=12.011,
        ),
        Atom(
            atom_id=3,
            atom_type="C",
            residue_id=1,
            residue_name="ARG",
            atom_name="C15",
            charge_group_num=15,
            partial_charge=0.5,
            mass=12.011,
        )
    ]

    Bond(atomlist[0], atomlist[1], bond_type="1", bond_length=0.147, force_constant=265265.0)
    Bond(atomlist[1], atomlist[2], bond_type="1", bond_length=0.147, force_constant=265265.0)

    angle = Angle(atomlist[0], atomlist[1], atomlist[2], angle_type="1", angle_value=109.5, force_constant=29288.0)
    angle_dict = angle.to_dict()
    with open("tests/samples/angle.json", "w") as f:
        json.dump(angle_dict, f)
    with open("tests/samples/angle.json", "r") as f:
        new_bond = Angle.from_dict(json.load(f),atoms=atomlist)
    assert angle.atom_a.atom_id == new_bond.atom_a.atom_id
    assert angle.atom_b.atom_id == new_bond.atom_b.atom_id
    assert angle.atom_c.atom_id == new_bond.atom_c.atom_id
    assert angle.angle_type == new_bond.angle_type
    assert angle.angle_value == new_bond.angle_value
    assert angle.force_constant == new_bond.force_constant
    -----------------------------
..\tests\test_topology.py
-----------------------------
import json
from polytop.monomer import Monomer
from polytop.topology import Topology


def test_monomer():
    arg = Topology.from_ITP("tests/samples/arginine.itp")
    monomer = Monomer(arg, arg.get_bond('N3','H20'), arg.get_bond('C11','O1'))
    assert len(monomer.LHS.atoms) == 2
    assert len(monomer.link.atoms) == 26-3+2
    assert len(monomer.RHS.atoms) == 3
    
def test_serializable():
    arg = Topology.from_ITP("tests/samples/arginine.itp")
    monomer = Monomer(arg, arg.get_bond('N3','H20'), arg.get_bond('C11','O1'))
    monomer.save("tests/samples/arg.json")
    
    new_monomer = Monomer.load("tests/samples/arg.json")
    assert len(monomer.topology.atoms) == len(new_monomer.topology.atoms)
    assert monomer.bond_a.atom_a.atom_id == new_monomer.bond_a.atom_a.atom_id
    assert monomer.bond_a.atom_b.atom_id == new_monomer.bond_a.atom_b.atom_id
    
    
    
-----------------------------
    
from polytop.monomer import Monomer
from polytop.polymer import Polymer
from polytop.topology import Topology


def test_polymer():    
    arg = Topology.from_ITP("tests/samples/arginine.itp")
    glu = Topology.from_ITP("tests/samples/glutamine.itp")
    arg_monomer = Monomer(arg, arg.get_bond('N3','H20'), arg.get_bond_by_name('C11','O1'))
    
    glu_monomer = Monomer(glu, glu.get_bond('N1','H6'), glu.get_bond_by_name('C4','O1'))
    
    polymer = Polymer([arg_monomer,glu_monomer], [20,80], num_monomers= 12, seed= 42, start_monomer= arg_monomer)
    polymer.save_to_file('tests/samples/polymer.json')
    polymer_topology = polymer.get_topology()-----------------------------
